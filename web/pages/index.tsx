import { useMutation, useQuery } from "@apollo/client";
import Head from "next/head";
import {
  Center,
  Divider,
  Grid,
  GridItem,
  useDisclosure,
} from "@chakra-ui/react";
import { useState } from "react";
import { ADD_TODO, GET_TODOS, EDIT_TODO, DELETE_TODO } from "../graphql";
import { FormSubmit } from "../types/form-event";
import { FormTodo } from "../components/form-todo";
import { TodoList } from "../components/todo-list";
import { TodoEdit } from "../components/todo-edit";

function updateTodoCache<T>(cache: any, { data }: T | any) {
  const [mutationKey] = Object.keys(data);
  const [, queryKey] = Object.keys(cache?.data?.data?.ROOT_QUERY);

  cache.writeQuery({
    query: GET_TODOS,
    data: { [queryKey]: data[mutationKey] },
  });
}

export default function Home() {
  const todos = useQuery(GET_TODOS);
  const [addTodo] = useMutation(ADD_TODO, { update: updateTodoCache });
  const [deleteTodo] = useMutation(DELETE_TODO, { update: updateTodoCache });
  const [editTodo] = useMutation(EDIT_TODO, { update: updateTodoCache });
  const { isOpen, onOpen, onClose } = useDisclosure();
  const [selectedTodo, setSelectedTodo] = useState("");

  if (todos.loading) return <h1>Loading...</h1>;

  const handleAddTodo = (e: FormSubmit) => {
    e.preventDefault();
    const title = e.target.title.value;
    const description = e.target.description.value;

    addTodo({ variables: { title, description, completed: false } });
  };

  const handleEdit = (e: FormSubmit) => {
    e.preventDefault();
    const title = e.target.title.value;
    const description = e.target.description.value;
    const completed = e.target.completed.checked;

    if (title && description) {
      editTodo({
        variables: { id: selectedTodo, title, description, completed },
      });
      onClose();
      return alert("Todo edited successfully!");
    }
    onClose();
    return alert("Please fill all fields!");
  };

  const handleDelete = (id: string) => {
    deleteTodo({ variables: { id } });
  };

  const handleOpenModal = (id: string) => {
    setSelectedTodo(id);
    onOpen();
  };

  return (
    <div className="background">
      <Head>
        <title>Todo Apollo GraphQL</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Center
        p="10"
        alignItems="center"
        justifyContent="center"
        h="auto"
        w="100%"
      >
        <Grid
          gap={8}
          templateColumns="repeat(auto-fit, minmax(400px, 1fr))"
          alignItems="flex-start"
          justifyContent="flex-start"
          className="form"
          p="6"
          pt="10"
          pb="10"
          borderRadius="4"
        >
          <GridItem w="100%">
            <FormTodo handleAddTodo={handleAddTodo} />
          </GridItem>
          <Divider />
          <GridItem>
            <TodoList
              todos={todos}
              handleDelete={handleDelete}
              handleOpenModal={handleOpenModal}
            />
          </GridItem>
        </Grid>
      </Center>

      <TodoEdit isOpen={isOpen} onClose={onClose} handleEdit={handleEdit} />
    </div>
  );
}
